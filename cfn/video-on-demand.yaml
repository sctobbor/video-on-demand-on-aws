Description: '(SO0021) - Video On Demand workflow with Step Functions, Ets, S3, Cloufront and DynamoDB'

Parameters:

  AdminEmail:
    Description: Email address for SNS notifications
    Type: String
    AllowedPattern: "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"

  SendAnonymousData:
      Description: Anonymous Metrics Request
      Type: String
      Default: "Yes"
      AllowedValues:
          - "Yes"
          - "No"

  BuildBucket:
        Description: S3 bucket for Lambda artifacts
        Type: String

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Parameters:
                    - AdminEmail
                    - SendAnonymousData
        ParameterLabels:
            AdminEmail:
                default: "Administrator email address"
            SendAnonymousData:
                default: "Send Anonymous Usage Data"

Resources:

  DynamoPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${AWS::StackName}-dynamo-access"
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Scan
            Resource:
              - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "Dynamo"]]
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
      Roles:
        - !Ref LambdaEtsJobRole
        - !Ref LambdaMediainfoRole
        - !Ref LambdaDynamoRole
        - !Ref LambdaSnsDynamoRole
        - !Ref StepFunctionsExecuteRole

  SnsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${AWS::StackName}-sns-access"
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - sns:List*
            Resource:
              - "arn:aws:sns:::*"
          -
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref StepsPublish
              - !Ref StepsErrors
      Roles:
        - !Ref LambdaSnsDynamoRole
        - !Ref LambdaS3SnsDeploymentRole
        - !Ref StepFunctionsExecuteRole

  LambdaEtsJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticTranscoderJobsSubmitter

  LambdaMediainfoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-s3-access"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                Resource:
                  - !Join ["", ["arn:aws:s3:::", Ref: "Source", "/*" ]]
                  - !Join ["", ["arn:aws:s3:::", Ref: "Mp4Dest", "/*" ]]

  LambdaDynamoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  LambdaSnsDynamoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  LambdaMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-s3-access"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

  StepFunctionsExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-steps-execute"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - states:*
                Resource:
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:*" ]]

# IAM Role for custom resources
  LambdaEtsDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-ets-resources"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - elastictranscoder:CreatePipeline
                  - elastictranscoder:CreatePreset
                  - elastictranscoder:DeletePipeline
                  - elastictranscoder:DeletePreset
                  - elastictranscoder:ListPipelines
                  - elastictranscoder:ListPresets
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - iam:List*
                  - iam:PassRole
                Resource:
                  - !Join ["", ["arn:aws:iam::", Ref: "AWS::AccountId", ":role/*"]]
              -
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]
              -
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

  LambdaStepDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-step-resources"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:List*
                  - iam:PassRole
                Resource:
                  - !Join ["", ["arn:aws:iam::", Ref: "AWS::AccountId", ":role/*"]]
              -
                Effect: Allow
                Action:
                  - states:*
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

  LambdaCfDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-cloudfront-resources"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - cloudfront:CreateCloudFrontOriginAccessIdentity
                  - cloudfront:ListCloudFrontOriginAccessIdentities
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutBucketPolicy
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

  LambdaS3SnsDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-s3sns-resources"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:ListFunctions
                  - lambda:UpdateFunctionConfiguration
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]
              -
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::*"
              -
                Effect: Allow
                Action:
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:PutBucketNotification
                  - s3:GetObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::", Ref: "Source" ]]
                  - !Join ["", ["arn:aws:s3:::", Ref: "HlsDest" ]]
              -
                Effect: Allow
                Action:
                  - sns:List*
                  - sns:Subscribe
                Resource:
                  - !Join ["", ["arn:aws:sns:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

# Service Roles
  EtsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - elastictranscoder.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticTranscoderRole

  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com" ]]
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-steps"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

# Services
  Dynamo:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: guid
        AttributeType: S
      KeySchema:
      - AttributeName: guid
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Ref AWS::StackName

  Source:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: source-logs/

  Mp4Dest:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: mp4-access/

  HlsDest:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs
        LogFilePrefix: hls-access/
      CorsConfiguration:
        CorsRules:
        - AllowedMethods: [GET]
          AllowedOrigins: ['*']

  Logs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite

  EtsWarnings:
    Type: AWS::SNS::Topic

  EtsProcessing:
    Type: AWS::SNS::Topic

  EtsErrors:
    Type: AWS::SNS::Topic
    Properties:
     Subscription:
      -
        Endpoint: !Ref AdminEmail
        Protocol: email

  EtsComplete:
    Type: AWS::SNS::Topic

  StepsErrors:
    Type: AWS::SNS::Topic
    Properties:
     Subscription:
      -
        Endpoint: !Ref AdminEmail
        Protocol: email

  StepsPublish:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref AdminEmail
          Protocol: email

  EtsPresets:
    Type: Custom::EtsPresets
    Properties:
      ServiceToken: !GetAtt LambdaEtsPresets.Arn

  LambdaEtsPresets:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ets-presets
      Description: Create Ets Presets
      Handler: ets-presets.handler
      Role: !GetAtt LambdaEtsDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime: nodejs4.3
      Timeout: 120

  EtsMp4:
    Type: Custom::Ets
    Properties:
      ServiceToken: !GetAtt LambdaEts.Arn
      Name: !Sub "${AWS::StackName}-Mp4"
      Complete: !Ref EtsComplete
      Error: !Ref EtsErrors
      Progress: !Ref EtsProcessing
      Warning: !Ref EtsWarnings
      Source: !Ref Source
      Dest: !Ref Mp4Dest
      Role: !GetAtt EtsServiceRole.Arn

  EtsHls:
    Type: Custom::Ets
    Properties:
      ServiceToken: !GetAtt LambdaEts.Arn
      Name: !Sub "${AWS::StackName}-HLS"
      Complete: !Ref EtsComplete
      Error: !Ref EtsErrors
      Progress: !Ref EtsProcessing
      Warning: !Ref EtsWarnings
      Source: !Ref Source
      Dest: !Ref HlsDest
      Role: !GetAtt EtsServiceRole.Arn

  LambdaEts:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-deploy-ets-pipeline"
      Description: Deploys Elastic Transcoder Pipeline
      Handler: ets-pipeline.handler
      Role: !GetAtt LambdaEtsDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime: nodejs4.3
      Timeout: 120

  CloudFrontIdentity:
    Type: Custom::CloudFrontIdentity
    Properties:
      ServiceToken: !GetAtt LambdaCloudfrontIdentity.Arn
      Bucket: !Ref HlsDest

  LambdaCloudfrontIdentity:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-custom-cloudfront-identity"
      Description: Create cloudfront origin access identity
      Handler: cloudfront-identity.handler
      Role: !GetAtt LambdaCfDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime: nodejs4.3
      Timeout: 120

  CloudFront:
    DependsOn: CloudFrontIdentity
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt HlsDest.DomainName
            Id: vodS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !GetAtt CloudFrontIdentity.Identity]]
        Enabled: 'true'
        Logging:
          IncludeCookies: 'false'
          Bucket: !GetAtt Logs.DomainName
          Prefix: cloudfront-logs/
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: vodS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
            Headers:
              - Origin
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

# Lambda functions for Step functions Workflow
  DynamoEntry:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-dynamo-entry
      Description: get guid and create dynamo entry
      Handler: dynamo-entry.handler
      Role: !GetAtt LambdaDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime: nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo
          Mp4Dest: !Ref Mp4Dest
          HlsDest: !Ref HlsDest

  Mediainfo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-mediainfo
      Description: run mediainfo & updateDB
      Handler: index.handler
      Role: !GetAtt LambdaMediainfoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/mediainfo.zip
      Runtime: nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo
          Mp4Dest: !Ref Mp4Dest

  Profiler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-profiler
      Description: Get Source Resolution and set profile
      Handler: profiler.handler
      Role: !GetAtt LambdaDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime: nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo

  EncodeMp4:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-encode-mp4
      Description: creates an Ets encode job for mp4
      Handler: encode-mp4.handler
      Role: !GetAtt LambdaEtsJobRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo
          EtsMp4: !Ref EtsMp4
          Mp4_2160p: !GetAtt EtsPresets.Mp4_2160p
          Mp4_1080p: !GetAtt EtsPresets.Mp4_1080p
          Mp4_720p: !GetAtt EtsPresets.Mp4_720p
          Mp4_540p: !GetAtt EtsPresets.Mp4_540p
          Mp4_432p: !GetAtt EtsPresets.Mp4_432p
          Mp4_360p: !GetAtt EtsPresets.Mp4_360p
          Mp4_270p: !GetAtt EtsPresets.Mp4_270p
          Mp4_234p: !GetAtt EtsPresets.Mp4_234p


  EncodeHls:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-encode-hls
      Description: encode hls
      Handler: encode-hls.handler
      Role: !GetAtt LambdaEtsJobRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo:
            !Ref Dynamo
          EtsHls:
            !Ref EtsHls
          Hls_2160p: !GetAtt EtsPresets.Hls_2160p
          Hls_1080p: !GetAtt EtsPresets.Hls_1080p
          Hls_720p: !GetAtt EtsPresets.Hls_720p
          Hls_540p: !GetAtt EtsPresets.Hls_540p
          Hls_432p: !GetAtt EtsPresets.Hls_432p
          Hls_360p: !GetAtt EtsPresets.Hls_360p
          Hls_270p: !GetAtt EtsPresets.Hls_270p
          Hls_234p: !GetAtt EtsPresets.Hls_234p

  StatusUpdate:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-status-update
      Description: dynamo and sns status update
      Handler: status-update.handler
      Role: !GetAtt LambdaSnsDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo
          StepsPublish: !Ref StepsPublish

  PresetCheck:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-preset-check
      Description: check encode job preset & update dynamo entry
      Handler: preset-check.handler
      Role: !GetAtt LambdaDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime: nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo:
            !Ref Dynamo
          EtsMp4:
            !Ref EtsMp4
          EtsHls:
            !Ref EtsHls

  HlsEndpoint:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-hls-endpoint
      Description: Generate CDN endpoint
      Handler: hls-endpoint.handler
      Role: !GetAtt LambdaDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo: !Ref Dynamo
          Cdn: !GetAtt CloudFront.DomainName

  Metadata:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-metadata
      Description: Generate json metadata for mp4 file
      Handler: metadata.handler
      Role: !GetAtt LambdaMediainfoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo:
            !Ref Dynamo
          Mp4Dest:
            !Ref Mp4Dest

  Publish:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish
      Description: sns notification on workflow
      Handler: publish.handler
      Role: !GetAtt LambdaSnsDynamoRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          Dynamo:
            !Ref Dynamo
          StepsPublish:
            !Ref StepsPublish
          UUID:
            !GetAtt Uuid.UUID
          anonymousData:
            !Ref SendAnonymousData

# Step Functions
  IngestStepFunctions:
    Type: Custom::IngestStepFunctions
    Properties:
      ServiceToken: !GetAtt LambdaIngestSteps.Arn
      Name: !Sub ${AWS::StackName}-Ingest
      DynamoEntry: !GetAtt DynamoEntry.Arn
      Mediainfo: !GetAtt Mediainfo.Arn
      Profiler: !GetAtt Profiler.Arn
      EncodeMp4: !GetAtt EncodeMp4.Arn
      EncodeHls: !GetAtt EncodeHls.Arn
      StatusUpdate: !GetAtt StatusUpdate.Arn
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn

  LambdaIngestSteps:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ingest-stepfunctions"
      Description: Custom Resource to deploys Step Functions
      Handler: ingest-stepfunctions.handler
      Role: !GetAtt LambdaStepDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime: nodejs4.3
      Timeout: 120

  PublishStepFunctions:
    Type: Custom::IngestStepFunctions
    Properties:
      ServiceToken: !GetAtt LambdaPublishSteps.Arn
      Name: !Sub ${AWS::StackName}-publish
      PresetCheck: !GetAtt PresetCheck.Arn
      Mediainfo: !GetAtt Mediainfo.Arn
      Metadata: !GetAtt Metadata.Arn
      HlsEndpoint: !GetAtt HlsEndpoint.Arn
      Publish: !GetAtt Publish.Arn
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn

  LambdaPublishSteps:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-publish-stepfunctions"
      Description: Custom Resource to deploys Step Functions
      Handler: publish-stepfunctions.handler
      Role: !GetAtt LambdaStepDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime: nodejs4.3
      Timeout: 120

  IngestExecute:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ingest-execute"
      Description: triggered by s3 putobject in source s3 bucket
      Handler: ingest-execute.handler
      Role: !GetAtt StepFunctionsExecuteRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          IngestStepFunctions: !Ref IngestStepFunctions
          Dynamo: !Ref Dynamo
          StepsErrors: !Ref StepsErrors

  PublishExecute:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-publish-execute
      Description: triggered by ETS commplete  SNS
      Handler: publish-execute.handler
      Role: !GetAtt StepFunctionsExecuteRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/functions.zip
      Runtime:  nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          PublishStepFunctions: !Ref PublishStepFunctions
          EtsMp4: !GetAtt EtsMp4.PipelineId
          EtsHls: !GetAtt EtsHls.PipelineId

  LambdaS3Invoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt IngestExecute.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  LambdaSnsInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PublishExecute.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref EtsComplete

  S3Notification:
    DependsOn: CloudFront
    Type: Custom::S3Notification
    Properties:
      ServiceToken: !GetAtt LambdaS3Notification.Arn
      Source: !Ref Source
      IngestArn: !GetAtt IngestExecute.Arn

  LambdaS3Notification:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-s3-notification"
      Description: Creates s3 Subscription
      Handler: s3-notification.handler
      Role: !GetAtt LambdaS3SnsDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime:  nodejs4.3
      Timeout: 120

  SnsSubscription:
    Type: Custom::SnsNotification
    Properties:
      ServiceToken: !GetAtt LambdaSnsSubscription.Arn
      EtsComplete: !Ref EtsComplete
      PublishArn: !GetAtt PublishExecute.Arn

  LambdaSnsSubscription:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-sns-subscription"
      Description: Creates SNS Subscritption
      Handler: sns-subscription.handler
      Role: !GetAtt LambdaS3SnsDeploymentRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/resources.zip
      Runtime:  nodejs4.3
      Timeout: 120

  PublishAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepsErrors
      AlarmDescription: "Sns notification on stateMachine execution failure"
      AlarmName: !Sub "${AWS::StackName}-publish-alarm"
      ComparisonOperator:  GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref PublishStepFunctions
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 300
      Statistic: Sum
      Threshold: 0.0
      EvaluationPeriods: '1'

  IngestAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref StepsErrors
      AlarmDescription: "Sns notification on stateMachine execution failure"
      AlarmName: !Sub "${AWS::StackName}-Ingest-alarm"
      ComparisonOperator:  GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref IngestStepFunctions
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Period: 300
      Statistic: Sum
      Threshold: 0.0
      EvaluationPeriods: '1'

  LambdaMetricsHelper:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-metrics"
      Description: Adds metrics UUID to publish function
      Handler: index.handler
      Role: !GetAtt LambdaMetricsRole.Arn
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: video-on-demand/v1/metrics.zip
      Runtime:  nodejs4.3
      Timeout: 120

  Uuid:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LambdaMetricsHelper"
          - "Arn"
      customAction: "createUuid"

  AnonymousMetric:
    Type: "Custom::LoadLambda"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LambdaMetricsHelper"
          - "Arn"
      solutionId: "SO0021"
      UUID: !GetAtt Uuid.UUID
      version: "1"
      anonymousData: !Ref SendAnonymousData
      customAction: "sendMetric"

Outputs:
  Dynamo:
    Description: DynamoDB Table
    Value: !Ref Dynamo

  Source:
    Description: Source Bucket
    Value: !Ref Source

  Mp4Dest:
    Description: MP4 Destination Bucket
    Value: !Ref Mp4Dest

  HlsDest:
    Description: HLS Destination Bucket
    Value: !Ref HlsDest

  Cdn:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFront.DomainName

  UUID:
    Description: AnonymousMetric UUID
    Value: !GetAtt Uuid.UUID
